import{T as i,a6 as s}from"./index-fU-TRYU7.js";async function b(d,l=1){return new Promise((e,r)=>{const p=new FileReader;p.readAsDataURL(d),p.onload=n=>{var c;const o=new Image;o.src=(c=n.target)==null?void 0:c.result,o.onload=()=>{const t=document.createElement("canvas");let a=o.width,g=o.height;const y=1200,f=1200;a>g?a>y&&(g=Math.round(g*(y/a)),a=y):g>f&&(a=Math.round(a*(f/g)),g=f),t.width=a,t.height=g;const w=t.getContext("2d");w==null||w.drawImage(o,0,0,a,g);let u=.9,m;t.toBlob(U=>{if(!U){r(new Error("Failed to compress image"));return}m=new File([U],d.name,{type:"image/jpeg",lastModified:Date.now()}),m.size>l*1024*1024&&u>.5?(u-=.1,t.toBlob(h=>{if(!h){r(new Error("Failed to compress image"));return}m=new File([h],d.name,{type:"image/jpeg",lastModified:Date.now()}),e(m)},"image/jpeg",u)):e(m)},"image/jpeg",u)},o.onerror=()=>{r(new Error("Failed to load image for compression"))}},p.onerror=()=>{r(new Error("Failed to read file for compression"))}})}async function E(d,l){try{const e=await b(d);console.log(`Original size: ${(d.size/1024/1024).toFixed(2)}MB, Compressed: ${(e.size/1024/1024).toFixed(2)}MB`);const n=`pets/${`${l}-${Math.random().toString(36).substring(2)}.jpg`}`;console.log("Starting image upload for pet:",l,"path:",n);const{error:o,data:c}=await i.storage.from("pet-images").upload(n,e,{cacheControl:"3600",upsert:!1,contentType:"image/jpeg"});if(o)throw console.error("Upload error:",o),s({title:"Upload failed",description:"There was a problem uploading your image. Please try again.",variant:"destructive"}),o;console.log("Upload successful, getting public URL");const{data:t}=await i.storage.from("pet-images").getPublicUrl(n);if(!(t!=null&&t.publicUrl))throw console.error("Failed to get public URL"),s({title:"Image processing failed",description:"Could not generate a public URL for your image.",variant:"destructive"}),new Error("Failed to get public URL for uploaded image");console.log("Public URL obtained:",t.publicUrl);const{error:a}=await i.from("pets").update({profile_image_url:t.publicUrl}).eq("id",l);if(a)throw console.error("Database update error:",a),await i.storage.from("pet-images").remove([n]),s({title:"Update failed",description:"Your image was uploaded but we couldn't update your pet's profile. Please try again.",variant:"destructive"}),a;return console.log("Successfully uploaded image and updated pet:",t.publicUrl),s({title:"Image uploaded",description:"Your pet's image has been successfully updated."}),t.publicUrl}catch(e){throw console.error("Error uploading image:",e),s({title:"Upload error",description:"An unexpected error occurred while uploading your image.",variant:"destructive"}),e}}async function F(d,l,e=!1){try{const r=[];let p=null;const{data:n,error:o}=await i.auth.getUser();if(o)throw o;if(!n||!n.user)throw new Error("User authentication required");const c=n.user.id;for(const t of d){const a=await b(t),f=`pets/${`${l}-${Math.random().toString(36).substring(2)}.jpg`}`,{error:w}=await i.storage.from("pet-images").upload(f,a,{cacheControl:"3600",upsert:!1,contentType:"image/jpeg"});if(w){console.error("Upload error:",w);continue}const{data:u}=await i.storage.from("pet-images").getPublicUrl(f);if(!(u!=null&&u.publicUrl)){console.error("Failed to get public URL");continue}const m=e&&r.length===0,{data:U,error:h}=await i.from("pet_images").insert({pet_id:l,image_url:u.publicUrl,is_primary:m,user_id:c,caption:t.name.split(".")[0]}).select().single();if(h){console.error("Database insert error:",h),await i.storage.from("pet-images").remove([f]);continue}r.push(U),m&&(p=u.publicUrl)}return r.length>0?s({title:"Images uploaded",description:`Successfully uploaded ${r.length} image${r.length>1?"s":""}.`}):s({title:"Upload failed",description:"No images were uploaded successfully.",variant:"destructive"}),{images:r,primaryImageUrl:p}}catch(r){throw console.error("Error uploading images:",r),s({title:"Upload error",description:"An unexpected error occurred while uploading your images.",variant:"destructive"}),r}}async function P(d,l){try{const e=await b(d);console.log(`Original size: ${(d.size/1024/1024).toFixed(2)}MB, Compressed: ${(e.size/1024/1024).toFixed(2)}MB`);const n=`lost-found/${`${l}-${Math.random().toString(36).substring(2)}.jpg`}`;console.log("Starting lost/found image upload for post:",l,"path:",n);const{error:o}=await i.storage.from("pet-images").upload(n,e,{cacheControl:"3600",upsert:!1,contentType:"image/jpeg"});if(o)if(o.message.includes("not found")||o.message.toLowerCase().includes("does not exist")){await i.storage.from("pet-images").upload("lost-found/.keep",new Blob([]));const{error:a}=await i.storage.from("pet-images").upload(n,e,{cacheControl:"3600",upsert:!1,contentType:"image/jpeg"});if(a)throw console.error("Upload retry error:",a),s({title:"Upload failed",description:"There was a problem uploading your image. Please try again.",variant:"destructive"}),a}else throw console.error("Upload error:",o),s({title:"Upload failed",description:"There was a problem uploading your image. Please try again.",variant:"destructive"}),o;const{data:c}=await i.storage.from("pet-images").getPublicUrl(n);if(!(c!=null&&c.publicUrl))throw console.error("Failed to get public URL"),s({title:"Image processing failed",description:"Could not generate a public URL for your image.",variant:"destructive"}),new Error("Failed to get public URL for uploaded image");const{error:t}=await i.from("lost_found_posts").update({image_url:c.publicUrl}).eq("id",l);if(t)throw console.error("Database update error:",t),await i.storage.from("pet-images").remove([n]),s({title:"Update failed",description:"Your image was uploaded but we couldn't update your report. Please try again.",variant:"destructive"}),t;return s({title:"Image uploaded",description:"Your report image has been successfully added."}),c.publicUrl}catch(e){throw console.error("Error uploading image:",e),s({title:"Upload error",description:"An unexpected error occurred while uploading your image.",variant:"destructive"}),e}}async function $(d,l){try{const{error:e}=await i.from("pet_images").update({is_primary:!0}).eq("id",d).eq("pet_id",l);if(e)throw e;return!0}catch(e){throw console.error("Error setting primary image:",e),s({title:"Update failed",description:"Failed to set image as primary. Please try again.",variant:"destructive"}),e}}async function x(d,l){try{const{error:e}=await i.from("pet_images").delete().eq("id",d);if(e)throw e;try{const r=l.split("/"),p=r[r.indexOf("pets")+1];await i.storage.from("pet-images").remove([`pets/${p}`])}catch(r){console.error("Error deleting image from storage:",r)}return s({title:"Image deleted",description:"Image has been successfully deleted."}),!0}catch(e){throw console.error("Error deleting image:",e),s({title:"Delete failed",description:"Failed to delete image. Please try again.",variant:"destructive"}),e}}export{F as a,P as b,x as d,$ as s,E as u};
